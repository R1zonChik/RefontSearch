package ru.lostone.refontsearch.updater;

import com.google.gson.JsonArray;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;
import ru.lostone.refontsearch.RefontSearch;
import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.CompletableFuture;

public class Updater {

    private final RefontSearch plugin;
    private final String currentVersion;
    private final String ENCRYPTED_DOMAIN = "aHR0cHM6Ly9yaXpvbmNoaWsucnU=";

    private String latestVersion = null;
    private String updateDate = null;
    private boolean updateAvailable = false;
    private boolean hasNotified = false;

    // üÜò FALLBACK –†–ï–ñ–ò–ú: –∫–æ–≥–¥–∞ —Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    private boolean siteAccessible = true;
    private int consecutiveFailures = 0;
    private static final int MAX_FAILURES_BEFORE_FALLBACK = 3;
    private boolean fallbackModeActive = false;
    private long lastFallbackCheck = 0;
    private static final long FALLBACK_RECHECK_TIME = 1800000; // 30 –º–∏–Ω—É—Ç

    private long lastUpdateCheck = 0;
    private static final long UPDATE_CACHE_TIME = 120000; // 2 –º–∏–Ω—É—Ç—ã –∫–µ—à
    private static final int MAX_UPDATE_RETRIES = 1;
    private static final long CHECK_INTERVAL = 6000L; // 5 –º–∏–Ω—É—Ç

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
    private boolean isHighPriorityUpdate = false;
    private String updateReason = "";
    private String lastUpdateResponse = null;

    public Updater(RefontSearch plugin) {
        this.plugin = plugin;
        this.currentVersion = plugin.getDescription().getVersion();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å FALLBACK —Ä–µ–∂–∏–º–æ–º
     */
    public void startUpdateChecker() {
        // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        new BukkitRunnable() {
            @Override
            public void run() {
                checkForUpdates();
            }
        }.runTaskLaterAsynchronously(plugin, 600L);

        // –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        new BukkitRunnable() {
            @Override
            public void run() {
                checkForUpdates();
            }
        }.runTaskTimerAsynchronously(plugin, CHECK_INTERVAL, CHECK_INTERVAL);
    }

    /**
     * –ë–´–°–¢–†–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –≤–µ—Ä—Å–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
     */
    public CompletableFuture<Boolean> checkForUpdates() {
        return CompletableFuture.supplyAsync(() -> {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (2 –º–∏–Ω—É—Ç—ã)
            long currentTime = System.currentTimeMillis();
            if (currentTime - lastUpdateCheck < UPDATE_CACHE_TIME) {
                return updateAvailable;
            }

            // üÜò FALLBACK: –ï—Å–ª–∏ –≤ fallback —Ä–µ–∂–∏–º–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç
            if (fallbackModeActive && (currentTime - lastFallbackCheck) < FALLBACK_RECHECK_TIME) {
                return false;
            }

            try {
                String serverIP = plugin.getServerIP();

                if (serverIP == null) {
                    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥
                    return false;
                }

                // üåê –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–£–ü–ù–û–°–¢–¨ –°–ê–ô–¢–ê
                boolean siteAvailable = checkSiteAccessibility();

                if (!siteAvailable) {
                    consecutiveFailures++;
                    // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ª–æ–≥–∏
                    if (consecutiveFailures >= MAX_FAILURES_BEFORE_FALLBACK) {
                        plugin.getLogger().warning("‚ö†Ô∏è –°–∞–π—Ç rizonchik.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                    }

                    if (consecutiveFailures >= MAX_FAILURES_BEFORE_FALLBACK && !fallbackModeActive) {
                        activateFallbackMode();
                    }

                    lastUpdateCheck = currentTime;
                    lastFallbackCheck = currentTime;
                    return false;
                }

                // üåê –°–ê–ô–¢ –î–û–°–¢–£–ü–ï–ù - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                if (consecutiveFailures > 0 || fallbackModeActive) {
                    consecutiveFailures = 0;
                    if (fallbackModeActive) {
                        deactivateFallbackMode();
                    }
                }

                String domain = new String(java.util.Base64.getDecoder().decode(ENCRYPTED_DOMAIN));
                String apiUrl = domain + "/api/check_license_by_ip.php";

                // üìÅ –ü–û–õ–£–ß–ê–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –§–ê–ô–õ–ê –ü–õ–ê–ì–ò–ù–ê
                String pluginFileName = getPluginFileName();

                // üîß URL —Å –≤–µ—Ä—Å–∏–µ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ–∞–π–ª–∞ (—É–±–∏—Ä–∞–µ–º –ª–æ–≥)
                String urlWithParams = apiUrl + "?" +
                        "ip=" + URLEncoder.encode(serverIP, "UTF-8") +
                        "&plugin=" + URLEncoder.encode("RefontSearch", "UTF-8") +
                        "&current_version=" + URLEncoder.encode(currentVersion, "UTF-8") +
                        "&file_name=" + URLEncoder.encode(pluginFileName, "UTF-8");

                URL url = new URL(urlWithParams);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("GET");
                connection.setConnectTimeout(5000);
                connection.setReadTimeout(5000);
                connection.setRequestProperty("User-Agent", "RefontSearch/" + currentVersion + " FastUpdateChecker");
                connection.setRequestProperty("Accept", "application/json");
                connection.setRequestProperty("Connection", "close");

                int responseCode = connection.getResponseCode();
                if (responseCode == 200) {
                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                    reader.close();
                    connection.disconnect();

                    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –æ—Ç–≤–µ—Ç–∞ API

                    boolean result = parseUpdateResponse(response.toString());
                    lastUpdateCheck = currentTime;
                    siteAccessible = true;
                    return result;
                } else {
                    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ HTTP –æ—à–∏–±–æ–∫
                }

            } catch (Exception e) {
                consecutiveFailures++;
                // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

                if (consecutiveFailures >= MAX_FAILURES_BEFORE_FALLBACK && !fallbackModeActive) {
                    activateFallbackMode();
                }
            }

            lastUpdateCheck = currentTime;
            return false;

        }).thenApply(result -> {
            if (result && updateAvailable && !hasNotified) {
                Bukkit.getScheduler().runTask(plugin, this::notifyUpdate);
                hasNotified = true;
            }
            return result;
        }).exceptionally(throwable -> {
            return false;
        });
    }

    /**
     * üìÅ –ü–û–õ–£–ß–ê–ï–¢ –ù–ê–ó–í–ê–ù–ò–ï –§–ê–ô–õ–ê –ü–õ–ê–ì–ò–ù–ê
     */
    private String getPluginFileName() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ reflection
            java.io.File pluginFile = null;

            // –°–ø–æ—Å–æ–± 1: —á–µ—Ä–µ–∑ getFile() –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try {
                java.lang.reflect.Method getFileMethod = plugin.getClass().getMethod("getFile");
                pluginFile = (java.io.File) getFileMethod.invoke(plugin);
            } catch (Exception e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            }

            // –°–ø–æ—Å–æ–± 2: —á–µ—Ä–µ–∑ URLClassLoader
            if (pluginFile == null) {
                try {
                    ClassLoader classLoader = plugin.getClass().getClassLoader();
                    if (classLoader instanceof java.net.URLClassLoader) {
                        java.net.URLClassLoader urlClassLoader = (java.net.URLClassLoader) classLoader;
                        java.net.URL[] urls = urlClassLoader.getURLs();
                        for (java.net.URL url : urls) {
                            if (url.getPath().endsWith(".jar")) {
                                pluginFile = new java.io.File(url.toURI());
                                break;
                            }
                        }
                    }
                } catch (Exception e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                }
            }

            // –°–ø–æ—Å–æ–± 3: –ø–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ plugins
            if (pluginFile == null) {
                java.io.File pluginsDir = plugin.getDataFolder().getParentFile();
                java.io.File[] files = pluginsDir.listFiles();
                if (files != null) {
                    for (java.io.File file : files) {
                        if (file.getName().toLowerCase().contains("refontsearch") &&
                                file.getName().endsWith(".jar")) {
                            pluginFile = file;
                            break;
                        }
                    }
                }
            }

            if (pluginFile != null) {
                String fileName = pluginFile.getName();
                // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                return fileName;
            } else {
                // –§–æ–ª–±—ç–∫ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –∏–∑ –≤–µ—Ä—Å–∏–∏
                String fallbackName = "RefontSearch-" + currentVersion + ".jar";
                // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                return fallbackName;
            }

        } catch (Exception e) {
            // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ –æ—à–∏–±–∫–∏
            return "RefontSearch-" + currentVersion + ".jar";
        }
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç API –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    private boolean parseUpdateResponse(String jsonResponse) {
        try {
            this.lastUpdateResponse = jsonResponse; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

            Gson gson = new Gson();
            JsonObject jsonObject = gson.fromJson(jsonResponse, JsonObject.class);

            if (jsonObject.has("success") && jsonObject.get("success").getAsBoolean()) {
                JsonObject data = jsonObject.getAsJsonObject("data");

                // üÜï –ü–†–û–í–ï–†–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û–ë –û–ë–ù–û–í–õ–ï–ù–ò–Ø–•
                if (data.has("update_info")) {
                    JsonObject updateInfo = data.getAsJsonObject("update_info");

                    if (updateInfo.has("update_available") && updateInfo.get("update_available").getAsBoolean()) {

                        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                        latestVersion = updateInfo.has("latest_version") ?
                                updateInfo.get("latest_version").getAsString() : currentVersion;

                        if (updateInfo.has("updated_at") && !updateInfo.get("updated_at").isJsonNull()) {
                            updateDate = updateInfo.get("updated_at").getAsString();
                        }

                        // üî• –ü–†–û–í–ï–†–Ø–ï–ú –ö–†–ò–¢–ò–ß–ù–û–°–¢–¨ –û–ë–ù–û–í–õ–ï–ù–ò–Ø
                        boolean isHighPriority = false;
                        String updateReason = "–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ";

                        if (updateInfo.has("file_change_detected") &&
                                updateInfo.get("file_change_detected").getAsBoolean()) {
                            isHighPriority = true;
                            updateReason = "–§–ê–ô–õ –ò–ó–ú–ï–ù–ï–ù - –ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï";
                        }

                        if (updateInfo.has("force_update") &&
                                updateInfo.get("force_update").getAsBoolean()) {
                            isHighPriority = true;
                            updateReason = "–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï";
                        }

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
                        this.isHighPriorityUpdate = isHighPriority;
                        this.updateReason = updateReason;

                        updateAvailable = true;

                        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ
                        plugin.getLogger().info("üÜï –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " + currentVersion + " ‚Üí " + latestVersion);
                        if (isHighPriority) {
                            plugin.getLogger().warning("üî• " + updateReason);
                        }
                        if (updateDate != null) {
                            plugin.getLogger().info("üìÖ –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: " + updateDate);
                        }

                        // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if (updateInfo.has("update_reasons")) {
                            try {
                                JsonArray reasons = updateInfo.getAsJsonArray("update_reasons");
                                plugin.getLogger().info("üìã –ü—Ä–∏—á–∏–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
                                for (int i = 0; i < reasons.size(); i++) {
                                    plugin.getLogger().info("   ‚Ä¢ " + reasons.get(i).getAsString());
                                }
                            } catch (Exception e) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
                            }
                        }

                        return true;
                    } else {
                        // –°–±—Ä–æ—Å –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ—Ç (—É–±–∏—Ä–∞–µ–º –ª–æ–≥)
                        if (updateAvailable) {
                            updateAvailable = false;
                            hasNotified = false;
                            isHighPriorityUpdate = false;
                        }
                    }
                } else {
                    // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
                }
            } else {
                // –£–±–∏—Ä–∞–µ–º –ª–æ–≥ API –æ—Ç–≤–µ—Ç–∞
            }

            return false;

        } catch (Exception e) {
            // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
            return false;
        }
    }

    /**
     * üåê –ü–†–û–í–ï–†–Ø–ï–¢ –î–û–°–¢–£–ü–ù–û–°–¢–¨ –°–ê–ô–¢–ê (–ø—Ä–æ—Å—Ç–æ–π ping)
     */
    private boolean checkSiteAccessibility() {
        try {
            String domain = new String(java.util.Base64.getDecoder().decode(ENCRYPTED_DOMAIN));
            URL url = new URL(domain);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("HEAD");
            connection.setConnectTimeout(3000);
            connection.setReadTimeout(3000);
            connection.setRequestProperty("User-Agent", "RefontSearch SiteCheck");

            int responseCode = connection.getResponseCode();
            connection.disconnect();

            return responseCode >= 200 && responseCode < 400;

        } catch (Exception e) {
            return false;
        }
    }

    /**
     * üÜò –ê–ö–¢–ò–í–ò–†–£–ï–¢ FALLBACK –†–ï–ñ–ò–ú
     */
    private void activateFallbackMode() {
        fallbackModeActive = true;
        lastFallbackCheck = System.currentTimeMillis();

        plugin.getLogger().warning("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        plugin.getLogger().warning("‚ïë      üÜò FALLBACK –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù       ‚ïë");
        plugin.getLogger().warning("‚ïë                                      ‚ïë");
        plugin.getLogger().warning("‚ïë  –°–∞–π—Ç rizonchik.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω        ‚ïë");
        plugin.getLogger().warning("‚ïë  –ü–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫        ‚ïë");
        plugin.getLogger().warning("‚ïë  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω  ‚ïë");
        plugin.getLogger().warning("‚ïë                                      ‚ïë");
        plugin.getLogger().warning("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –≤ –∏–≥—Ä–µ
        notifyFallbackMode();
    }

    /**
     * ‚úÖ –î–ï–ê–ö–¢–ò–í–ò–†–£–ï–¢ FALLBACK –†–ï–ñ–ò–ú
     */
    private void deactivateFallbackMode() {
        fallbackModeActive = false;
        consecutiveFailures = 0;

        plugin.getLogger().info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        plugin.getLogger().info("‚ïë      ‚úÖ –°–ê–ô–¢ –°–ù–û–í–ê –î–û–°–¢–£–ü–ï–ù!         ‚ïë");
        plugin.getLogger().info("‚ïë                                      ‚ïë");
        plugin.getLogger().info("‚ïë  Fallback —Ä–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω             ‚ïë");
        plugin.getLogger().info("‚ïë  –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π    ‚ïë");
        plugin.getLogger().info("‚ïë                                      ‚ïë");
        plugin.getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        notifyFallbackDeactivated();
    }

    /**
     * üîî –£–í–ï–î–û–ú–õ–Ø–ï–¢ –û FALLBACK –†–ï–ñ–ò–ú–ï
     */
    private void notifyFallbackMode() {
        String message = ChatColor.YELLOW + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" +
                ChatColor.YELLOW + "‚ïë" + ChatColor.RED + ChatColor.BOLD + "        üÜò FALLBACK –†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ï–ù       " + ChatColor.RESET + ChatColor.YELLOW + "‚ïë\n" +
                ChatColor.YELLOW + "‚ïë                                        ‚ïë\n" +
                ChatColor.YELLOW + "‚ïë  " + ChatColor.WHITE + "‚ö†Ô∏è –°–∞–π—Ç rizonchik.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω        " + ChatColor.YELLOW + "‚ïë\n" +
                ChatColor.YELLOW + "‚ïë  " + ChatColor.WHITE + "üîì –ü–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–æ–∫        " + ChatColor.YELLOW + "‚ïë\n" +
                ChatColor.YELLOW + "‚ïë  " + ChatColor.WHITE + "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30–º  " + ChatColor.YELLOW + "‚ïë\n" +
                ChatColor.YELLOW + "‚ïë                                        ‚ïë\n" +
                ChatColor.YELLOW + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù";

        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("refontsearch.admin") || player.isOp()) {
                player.sendMessage(message);
            }
        }
    }

    /**
     * üîî –£–í–ï–î–û–ú–õ–Ø–ï–¢ –û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ò –°–ê–ô–¢–ê
     */
    private void notifyFallbackDeactivated() {
        String message = ChatColor.GREEN + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" +
                ChatColor.GREEN + "‚ïë" + ChatColor.GREEN + ChatColor.BOLD + "        ‚úÖ –°–ê–ô–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù!           " + ChatColor.RESET + ChatColor.GREEN + "‚ïë\n" +
                ChatColor.GREEN + "‚ïë                                        ‚ïë\n" +
                ChatColor.GREEN + "‚ïë  " + ChatColor.WHITE + "üåê –°–≤—è–∑—å —Å rizonchik.ru –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞  " + ChatColor.GREEN + "‚ïë\n" +
                ChatColor.GREEN + "‚ïë  " + ChatColor.WHITE + "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞      " + ChatColor.GREEN + "‚ïë\n" +
                ChatColor.GREEN + "‚ïë  " + ChatColor.WHITE + "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∞         " + ChatColor.GREEN + "‚ïë\n" +
                ChatColor.GREEN + "‚ïë                                        ‚ïë\n" +
                ChatColor.GREEN + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù";

        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("refontsearch.admin") || player.isOp()) {
                player.sendMessage(message);
            }
        }
    }

    /**
     * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å –ö–†–ê–°–ò–í–´–ú –¥–∏–∑–∞–π–Ω–æ–º –∏ –∑–≤—É–∫–æ–º
     */
    private void notifyUpdate() {
        // üîä –ó–í–£–ö–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –ø—Ä–∞–≤–∞–º–∏
        playUpdateSound(isHighPriorityUpdate);

        // üé® –ö–†–ê–°–ò–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        String border = isHighPriorityUpdate ? "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•" : "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó";

        plugin.getLogger().info(border);
        if (isHighPriorityUpdate) {
            plugin.getLogger().info("üî•üî•üî•    –ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï!    üî•üî•üî•");
            plugin.getLogger().info("üî•                                    üî•");
            plugin.getLogger().info("üî•  üìÅ –§–ê–ô–õ –ü–õ–ê–ì–ò–ù–ê –ò–ó–ú–ï–ù–ï–ù!         üî•");
        } else {
            plugin.getLogger().info("‚ïë        –î–û–°–¢–£–ü–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï!          ‚ïë");
            plugin.getLogger().info("‚ïë                                      ‚ïë");
        }

        plugin.getLogger().info(isHighPriorityUpdate ? "üî•  üì¶ –í–µ—Ä—Å–∏—è: " + currentVersion + " ‚Üí " + latestVersion + "     üî•" : "‚ïë  üì¶ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: " + currentVersion + getSpaces(currentVersion) + "‚ïë");
        plugin.getLogger().info(isHighPriorityUpdate ? "üî•  üÜï –ù–æ–≤–∞—è: " + latestVersion + "               üî•" : "‚ïë  üÜï –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: " + latestVersion + getSpaces(latestVersion) + "‚ïë");

        if (updateDate != null) {
            String formattedDate = formatUpdateDate(updateDate);
            plugin.getLogger().info(isHighPriorityUpdate ? "üî•  üìÖ –î–∞—Ç–∞: " + formattedDate + "          üî•" : "‚ïë  üìÖ –î–∞—Ç–∞: " + formattedDate + getSpaces(formattedDate) + "‚ïë");
        }

        if (isHighPriorityUpdate) {
            plugin.getLogger().info("üî•                                    üî•");
            plugin.getLogger().info("üî•  ‚ö†Ô∏è  –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –°–†–û–ß–ù–û –û–ë–ù–û–í–ò–¢–¨  üî•");
            plugin.getLogger().info("üî•  ü§ñ @rizonchik_bot                üî•");
            plugin.getLogger().info("üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•");
        } else {
            plugin.getLogger().info("‚ïë                                      ‚ïë");
            plugin.getLogger().info("‚ïë  ü§ñ @rizonchik_bot                   ‚ïë");
            plugin.getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        }

        // üéä –ö–†–ê–°–ò–í–û–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º
        notifyModeratorsWithStyle(isHighPriorityUpdate, updateReason);

        // ‚è∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        long repeatDelay = isHighPriorityUpdate ? 600L : 36000L; // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö, 30 –º–∏–Ω—É—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
        new BukkitRunnable() {
            @Override
            public void run() {
                if (updateAvailable) {
                    if (isHighPriorityUpdate) {
                        plugin.getLogger().warning("üî• –ö–†–ò–¢–ò–ß–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –°–†–û–ß–ù–û!");
                        playUpdateSound(true);
                    } else {
                        plugin.getLogger().info("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ " + currentVersion + " ‚Üí " + latestVersion);
                    }
                }
            }
        }.runTaskLater(plugin, repeatDelay);
    }

    /**
     * üîä –í–û–°–ü–†–û–ò–ó–í–û–î–ò–¢ –ó–í–£–ö –û–ë–ù–û–í–õ–ï–ù–ò–Ø
     */
    private void playUpdateSound(boolean isHighPriority) {
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("refontsearch.admin") ||
                    player.hasPermission("refontsearch.police") ||
                    player.isOp()) {

                if (isHighPriority) {
                    // üö® –ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - –≥—Ä–æ–º–∫–∏–π –∑–≤—É–∫
                    player.playSound(player.getLocation(), "entity.wither.spawn", 1.0f, 1.0f);

                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–≤—É–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
                    Bukkit.getScheduler().runTaskLater(plugin, () -> {
                        player.playSound(player.getLocation(), "block.note_block.pling", 1.0f, 2.0f);
                    }, 10L);

                    Bukkit.getScheduler().runTaskLater(plugin, () -> {
                        player.playSound(player.getLocation(), "block.note_block.pling", 1.0f, 1.5f);
                    }, 20L);

                } else {
                    // üîî –û–ë–´–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - –ø—Ä–∏—è—Ç–Ω—ã–π –∑–≤—É–∫
                    player.playSound(player.getLocation(), "entity.experience_orb.pickup", 1.0f, 1.0f);

                    Bukkit.getScheduler().runTaskLater(plugin, () -> {
                        player.playSound(player.getLocation(), "block.note_block.chime", 0.7f, 1.2f);
                    }, 5L);
                }
            }
        }
    }

    /**
     * üé® –°–¢–ò–õ–¨–ù–´–ï —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
     */
    private void notifyModeratorsWithStyle(boolean isHighPriority, String updateReason) {
        String updateMessage;

        if (isHighPriority) {
            // üî• –ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
            updateMessage = ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•        " + ChatColor.YELLOW + "–ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï!" + ChatColor.RED + "        üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•                                        üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•  " + ChatColor.WHITE + "üìÅ –§–ê–ô–õ –ü–õ–ê–ì–ò–ù–ê –ò–ó–ú–ï–ù–ï–ù!         " + ChatColor.RED + "üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•  " + ChatColor.WHITE + "üîß " + currentVersion + " ‚Üí " + latestVersion + "                    " + ChatColor.RED + "üî•üî•üî•\n";

            if (updateDate != null) {
                String formattedDate = formatUpdateDate(updateDate);
                updateMessage += ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•  " + ChatColor.WHITE + "üìÖ " + formattedDate + "                  " + ChatColor.RED + "üî•üî•üî•\n";
            }

            updateMessage += ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•                                        üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•  " + ChatColor.YELLOW + "‚ö†Ô∏è  –û–ë–ù–û–í–ò–¢–ï –°–†–û–ß–ù–û!             " + ChatColor.RED + "üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•  " + ChatColor.AQUA + "ü§ñ @rizonchik_bot               " + ChatColor.RED + "üî•üî•üî•\n" +
                    ChatColor.RED + "" + ChatColor.BOLD + "üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•üî•";

        } else {
            // ‚ú® –û–ë–´–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï
            updateMessage = ChatColor.GOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" +
                    ChatColor.GOLD + "‚ïë" + ChatColor.YELLOW + ChatColor.BOLD + "          ‚ú® –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–õ–ê–ì–ò–ù–ê!         " + ChatColor.RESET + ChatColor.GOLD + "‚ïë\n" +
                    ChatColor.GOLD + "‚ïë                                        ‚ïë\n" +
                    ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üîß RefontSearch " + currentVersion + " ‚Üí " + latestVersion + "            " + ChatColor.GOLD + "‚ïë\n";

            if (updateDate != null) {
                String formattedDate = formatUpdateDate(updateDate);
                updateMessage += ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üìÖ " + formattedDate + "                    " + ChatColor.GOLD + "‚ïë\n";
            }

            updateMessage += ChatColor.GOLD + "‚ïë                                        ‚ïë\n" +
                    ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üì• –°–∫–∞—á–∞–π—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:               " + ChatColor.GOLD + "‚ïë\n" +
                    ChatColor.GOLD + "‚ïë  " + ChatColor.AQUA + "ü§ñ @rizonchik_bot                     " + ChatColor.GOLD + "‚ïë\n" +
                    ChatColor.GOLD + "‚ïë                                        ‚ïë\n" +
                    ChatColor.GOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù";
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å –ø—Ä–∞–≤–∞–º–∏
        for (Player player : Bukkit.getOnlinePlayers()) {
            if (player.hasPermission("refontsearch.admin") ||
                    player.hasPermission("refontsearch.police") ||
                    player.isOp()) {

                player.sendMessage(updateMessage);

                // üéä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–§–§–ï–ö–¢–´ –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (isHighPriority) {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º title
                    player.sendTitle(
                            ChatColor.RED + "" + ChatColor.BOLD + "üî• –ö–†–ò–¢–ò–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï! üî•",
                            ChatColor.YELLOW + "–§–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω - –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ä–æ—á–Ω–æ!",
                            10, 60, 20
                    );

                    // –≠—Ñ—Ñ–µ–∫—Ç —á–∞—Å—Ç–∏—Ü (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
                    try {
                        player.spawnParticle(org.bukkit.Particle.EXPLOSION_LARGE, player.getLocation(), 3);
                    } catch (Exception e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —á–∞—Å—Ç–∏—Ü—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
                    }
                } else {
                    // –û–±—ã—á–Ω—ã–π title
                    player.sendTitle(
                            ChatColor.GOLD + "" + ChatColor.BOLD + "‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ!",
                            ChatColor.WHITE + "RefontSearch " + currentVersion + " ‚Üí " + latestVersion,
                            10, 40, 10
                    );
                }
            }
        }
    }

    private String getSpaces(String text) {
        int spaces = 12 - text.length();
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < spaces; i++) {
            result.append(" ");
        }
        return result.toString();
    }

    private String formatUpdateDate(String dateString) {
        try {
            if (dateString.contains(" ")) {
                DateTimeFormatter inputFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                DateTimeFormatter outputFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy");
                LocalDateTime date = LocalDateTime.parse(dateString, inputFormatter);
                return date.format(outputFormatter);
            }
            return dateString;
        } catch (Exception e) {
            return dateString;
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
     */
    public void forceCheckUpdates() {
        hasNotified = false;
        lastUpdateCheck = 0;
        checkForUpdates();
    }

    /**
     * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–≥—Ä–æ–∫—É
     */
    public void sendUpdateInfo(Player player) {
        if (fallbackModeActive) {
            player.sendMessage(ChatColor.YELLOW + "‚ö†Ô∏è –ü–ª–∞–≥–∏–Ω –≤ FALLBACK —Ä–µ–∂–∏–º–µ - —Å–∞–π—Ç rizonchik.ru –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            player.sendMessage(ChatColor.YELLOW + "üîì –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
            return;
        }

        if (updateAvailable) {
            String message = ChatColor.GOLD + "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n" +
                    ChatColor.GOLD + "‚ïë" + ChatColor.YELLOW + ChatColor.BOLD + "       –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –û–ë–ù–û–í–õ–ï–ù–ò–ò        " + ChatColor.RESET + ChatColor.GOLD + "‚ïë\n" +
                    ChatColor.GOLD + "‚ïë                                        ‚ïë\n" +
                    ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üì¶ –¢–µ–∫—É—â–∞—è: " + currentVersion + "                     " + ChatColor.GOLD + "‚ïë\n" +
                    ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üÜï –î–æ—Å—Ç—É–ø–Ω–∞: " + latestVersion + "                    " + ChatColor.GOLD + "‚ïë\n";

            if (updateDate != null) {
                String formattedDate = formatUpdateDate(updateDate);
                message += ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üìÖ –î–∞—Ç–∞: " + formattedDate + "                  " + ChatColor.GOLD + "‚ïë\n";
            }

            message += ChatColor.GOLD + "‚ïë                                        ‚ïë\n" +
                    ChatColor.GOLD + "‚ïë  " + ChatColor.WHITE + "üì• @rizonchik_bot                      " + ChatColor.GOLD + "‚ïë\n" +
                    ChatColor.GOLD + "‚ïë                                        ‚ïë\n" +
                    ChatColor.GOLD + "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù";

            player.sendMessage(message);
        } else {
            player.sendMessage(ChatColor.GREEN + "‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: " + currentVersion);
        }
    }

    // ====== –ì–ï–¢–¢–ï–†–´ ======

    public boolean isUpdateAvailable() {
        return updateAvailable;
    }

    public String getLatestVersion() {
        return latestVersion;
    }

    public String getCurrentVersion() {
        return currentVersion;
    }

    public String getUpdateDate() {
        return updateDate;
    }

    public boolean isFallbackModeActive() {
        return fallbackModeActive;
    }

    public boolean isSiteAccessible() {
        return siteAccessible;
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    public void reset() {
        updateAvailable = false;
        hasNotified = false;
        latestVersion = null;
        updateDate = null;
        lastUpdateCheck = 0;
        consecutiveFailures = 0;
        fallbackModeActive = false;
        siteAccessible = true;
        isHighPriorityUpdate = false;
        updateReason = "";
        lastUpdateResponse = null;
    }
}