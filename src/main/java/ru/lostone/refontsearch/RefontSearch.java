package ru.lostone.refontsearch;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Location;
import org.bukkit.World;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.java.JavaPlugin;
import ru.lostone.refontsearch.listener.DemorganMovementListener;
import ru.lostone.refontsearch.command.*;
import ru.lostone.refontsearch.listener.*;
import ru.lostone.refontsearch.manager.DemorganManager;
import ru.lostone.refontsearch.manager.JailManager;
import ru.lostone.refontsearch.manager.WantedManager;
import ru.lostone.refontsearch.manager.JailsManager;
import ru.lostone.refontsearch.integration.RefontSearchExpansion;
import ru.lostone.refontsearch.updater.Updater;
import ru.lostone.refontsearch.protection.IPProtection;

import java.io.File;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.io.BufferedReader;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLEncoder;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;

public final class RefontSearch extends JavaPlugin {

    private static RefontSearch instance;
    private Location jailLocation;
    private Location unjailLocation;
    private JailsManager jailsManager;
    private Updater updater;
    private IPProtection ipProtection;

    // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    private static final String ENCRYPTED_DOMAIN = "aHR0cHM6Ly9yaXpvbmNoaWsucnU=";
    private String serverIP = null;
    private String licenseKey = null;
    private boolean isLocalServer = false;
    private boolean isValidated = false;

    // üÜò FALLBACK –†–ï–ñ–ò–ú –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏–π
    private boolean licenseFallbackActive = false;
    private int licenseFallureCount = 0;
    private static final int MAX_LICENSE_FAILURES = 3;

    // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–µ–Ω–∑–∏–∏
    private long lastLicenseCheck = 0;
    private boolean lastLicenseResult = false;
    private static final long LICENSE_CACHE_TIME = 300000; // 5 –º–∏–Ω—É—Ç –∫–µ—à
    private static final int MAX_RETRIES = 2; // –£–º–µ–Ω—å—à–∏–ª–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
    private static final long RETRY_DELAY = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã

    @Override
    public void onEnable() {
        instance = this;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞—â–∏—Ç—É IP
        ipProtection = new IPProtection(this);

        // –ü–æ–ª—É—á–∞–µ–º IP —Å–µ—Ä–≤–µ—Ä–∞
        serverIP = getServerIP();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ IP –ª–æ–∫–∞–ª—å–Ω—ã–º
        isLocalServer = isLocalIP(serverIP);

        // –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (isLocalServer) {
            getLogger().info("üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏");
            continueLoading();
        } else {
            // –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
            getLogger().info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏...");

            Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
                boolean licenseValid = validateLicenseWithRetries();
                boolean ipValid = ipProtection.validateServer();
                boolean integrityValid = ipProtection.checkIntegrity();

                // üÜò FALLBACK: –ï—Å–ª–∏ IP protection –≤ fallback —Ä–µ–∂–∏–º–µ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫
                if (ipProtection.isFallbackModeActive()) {
                    getLogger().warning("üÜò IP Protection –≤ FALLBACK —Ä–µ–∂–∏–º–µ - –ø–ª–∞–≥–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
                    Bukkit.getScheduler().runTask(this, this::continueLoading);
                    return;
                }

                // üÜò FALLBACK: –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—è –≤ fallback —Ä–µ–∂–∏–º–µ - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫
                if (licenseFallbackActive) {
                    getLogger().warning("üÜò License –≤ FALLBACK —Ä–µ–∂–∏–º–µ - –ø–ª–∞–≥–∏–Ω –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");
                    Bukkit.getScheduler().runTask(this, this::continueLoading);
                    return;
                }

                if (licenseValid && ipValid && integrityValid) {
                    Bukkit.getScheduler().runTask(this, this::continueLoading);
                } else {
                    getLogger().severe("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã");
                    if (!licenseValid) getLogger().severe("  ‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è: ‚ùå");
                    if (!ipValid) getLogger().severe("  ‚Ä¢ IP –∑–∞—â–∏—Ç–∞: ‚ùå");
                    if (!integrityValid) getLogger().severe("  ‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: ‚ùå");
                    Bukkit.getScheduler().runTask(this, this::disablePlugin);
                }
            });
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Å FALLBACK —Ä–µ–∂–∏–º–æ–º
     */
    private boolean validateLicenseWithRetries() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        long currentTime = System.currentTimeMillis();
        if (currentTime - lastLicenseCheck < LICENSE_CACHE_TIME && lastLicenseResult) {
            getLogger().info("‚úÖ –õ–∏—Ü–µ–Ω–∑–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ (–∫–µ—à)");
            return true;
        }

        // üÜò FALLBACK: –ï—Å–ª–∏ —É–∂–µ –≤ fallback —Ä–µ–∂–∏–º–µ
        if (licenseFallbackActive) {
            getLogger().info("üÜò –õ–∏—Ü–µ–Ω–∑–∏—è –≤ FALLBACK —Ä–µ–∂–∏–º–µ");
            return true;
        }

        // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
        for (int attempt = 1; attempt <= MAX_RETRIES; attempt++) {
            try {
                boolean result = validateLicense();

                if (result) {
                    lastLicenseCheck = currentTime;
                    lastLicenseResult = true;
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ—É–¥–∞—á
                    licenseFallureCount = 0;
                    if (licenseFallbackActive) {
                        deactivateLicenseFallback();
                    }
                    return true;
                }
            } catch (Exception e) {
                getLogger().warning("‚ùå –ü–æ–ø—ã—Ç–∫–∞ " + attempt + " –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ—É–¥–∞—á–Ω–∞: " + e.getMessage());
            }

            if (attempt < MAX_RETRIES) {
                try {
                    Thread.sleep(RETRY_DELAY);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }

        // üÜò –í–°–ï –ü–û–ü–´–¢–ö–ò –ù–ï–£–î–ê–ß–ù–´ - –ø—Ä–æ–≤–µ—Ä—è–µ–º fallback
        licenseFallureCount++;

        if (licenseFallureCount >= MAX_LICENSE_FAILURES) {
            return activateLicenseFallback();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å
        if (lastLicenseResult && (currentTime - lastLicenseCheck) < LICENSE_CACHE_TIME * 3) {
            getLogger().warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–µ—à –ª–∏—Ü–µ–Ω–∑–∏–∏");
            return true;
        }

        return false;
    }

    /**
     * üÜò –ê–ö–¢–ò–í–ò–†–£–ï–¢ FALLBACK –†–ï–ñ–ò–ú –î–õ–Ø –õ–ò–¶–ï–ù–ó–ò–ò
     */
    private boolean activateLicenseFallback() {
        licenseFallbackActive = true;

        getLogger().warning("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        getLogger().warning("‚ïë    üÜò LICENSE FALLBACK –ê–ö–¢–ò–í–ï–ù       ‚ïë");
        getLogger().warning("‚ïë                                      ‚ïë");
        getLogger().warning("‚ïë  –°–µ—Ä–≤–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω          ‚ïë");
        getLogger().warning("‚ïë  –ü–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø—Ä–æ–≤–µ—Ä–∫–∏        ‚ïë");
        getLogger().warning("‚ïë  –ª–∏—Ü–µ–Ω–∑–∏–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–∏    ‚ïë");
        getLogger().warning("‚ïë                                      ‚ïë");
        getLogger().warning("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

        return true;
    }

    /**
     * ‚úÖ –î–ï–ê–ö–¢–ò–í–ò–†–£–ï–¢ LICENSE FALLBACK –†–ï–ñ–ò–ú
     */
    private void deactivateLicenseFallback() {
        licenseFallbackActive = false;
        licenseFallureCount = 0;

        getLogger().info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        getLogger().info("‚ïë    ‚úÖ –õ–ò–¶–ï–ù–ó–ò–Ø –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!        ‚ïë");
        getLogger().info("‚ïë                                      ‚ïë");
        getLogger().info("‚ïë  –°–≤—è–∑—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ª–∏—Ü–µ–Ω–∑–∏–π           ‚ïë");
        getLogger().info("‚ïë  –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞                       ‚ïë");
        getLogger().info("‚ïë                                      ‚ïë");
        getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }

    /**
     * üåê –ü–†–û–í–ï–†–Ø–ï–¢ –î–û–°–¢–£–ü–ù–û–°–¢–¨ –°–ê–ô–¢–ê –î–õ–Ø –õ–ò–¶–ï–ù–ó–ò–ò
     */
    private boolean checkLicenseSiteAccessibility() {
        try {
            String domain = new String(java.util.Base64.getDecoder().decode(ENCRYPTED_DOMAIN));
            URL url = new URL(domain);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("HEAD");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);
            connection.setRequestProperty("User-Agent", "RefontSearch LicenseCheck");

            int responseCode = connection.getResponseCode();
            connection.disconnect();

            return responseCode >= 200 && responseCode < 500;

        } catch (Exception e) {
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ IP –ª–æ–∫–∞–ª—å–Ω—ã–º
     */
    private boolean isLocalIP(String ip) {
        if (ip == null) return true;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ localhost
        if (ip.equals("localhost") || ip.equals("127.0.0.1") || ip.equals("::1")) {
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—É—é —Å–µ—Ç—å
        if (ip.startsWith("192.168.") ||
                ip.startsWith("10.") ||
                ip.startsWith("172.16.") ||
                ip.startsWith("172.17.") ||
                ip.startsWith("172.18.") ||
                ip.startsWith("172.19.") ||
                ip.startsWith("172.20.") ||
                ip.startsWith("172.21.") ||
                ip.startsWith("172.22.") ||
                ip.startsWith("172.23.") ||
                ip.startsWith("172.24.") ||
                ip.startsWith("172.25.") ||
                ip.startsWith("172.26.") ||
                ip.startsWith("172.27.") ||
                ip.startsWith("172.28.") ||
                ip.startsWith("172.29.") ||
                ip.startsWith("172.30.") ||
                ip.startsWith("172.31.")) {
            return true;
        }

        return false;
    }

    /**
     * –ü–†–û–í–ï–†–ö–ê –õ–ò–¶–ï–ù–ó–ò–ò —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π fallback
     */
    private boolean validateLicense() {
        try {
            if (serverIP == null) {
                throw new Exception("IP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

            // üåê –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
            if (!checkLicenseSiteAccessibility()) {
                throw new Exception("–°–∞–π—Ç –ª–∏—Ü–µ–Ω–∑–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

            String domain = new String(java.util.Base64.getDecoder().decode(ENCRYPTED_DOMAIN));
            String apiUrl = domain + "/api/check_license_by_ip.php";

            String urlWithParams = apiUrl + "?" +
                    "ip=" + URLEncoder.encode(serverIP, "UTF-8") +
                    "&plugin=" + URLEncoder.encode("RefontSearch", "UTF-8") +
                    "&current_version=" + URLEncoder.encode(getDescription().getVersion(), "UTF-8");

            URL url = new URL(urlWithParams);
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(8000);
            connection.setReadTimeout(8000);
            connection.setRequestProperty("User-Agent", "RefontSearch/" + getDescription().getVersion());
            connection.setRequestProperty("Accept", "application/json");

            int responseCode = connection.getResponseCode();

            if (responseCode == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                try {
                    Gson gson = new Gson();
                    JsonObject jsonResponse = gson.fromJson(response.toString(), JsonObject.class);

                    if (jsonResponse.has("success") && jsonResponse.get("success").getAsBoolean()) {
                        if (jsonResponse.has("data")) {
                            JsonObject data = jsonResponse.getAsJsonObject("data");

                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å IP
                            if (data.has("ip_found") && data.get("ip_found").getAsBoolean()) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏
                                if (data.has("license_active") && data.get("license_active").getAsBoolean()) {

                                    // –ö—Ä–∞—Ç–∫–∏–π –ª–æ–≥ —É—Å–ø–µ—Ö–∞
                                    String serverName = data.has("server_name") ?
                                            data.get("server_name").getAsString() : "Unknown";
                                    getLogger().info("‚úÖ –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: " + serverName);

                                    return true;
                                } else {
                                    getLogger().warning("‚ùå –õ–∏—Ü–µ–Ω–∑–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞");
                                    return false; // –≠—Ç–æ –æ—Ç–∫–∞–∑ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º
                                }
                            } else {
                                getLogger().warning("‚ùå IP –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
                                return false; // –≠—Ç–æ –æ—Ç–∫–∞–∑ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º
                            }
                        } else {
                            throw new Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API");
                        }
                    } else {
                        String message = jsonResponse.has("message") ?
                                jsonResponse.get("message").getAsString() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
                        getLogger().warning("‚ùå " + message);
                        return false; // –≠—Ç–æ –æ—Ç–∫–∞–∑ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º
                    }
                } catch (Exception e) {
                    throw new Exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
                }
            } else if (responseCode == 403) {
                getLogger().warning("‚ùå IP –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ @rizonchik_bot");
                return false; // –≠—Ç–æ –æ—Ç–∫–∞–∑ –≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–∞–π—Ç–æ–º
            } else if (responseCode == 404) {
                throw new Exception("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            } else {
                throw new Exception("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + responseCode);
            }

        } catch (java.net.ConnectException e) {
            throw new RuntimeException("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ª–∏—Ü–µ–Ω–∑–∏–π", e);
        } catch (java.net.SocketTimeoutException e) {
            throw new RuntimeException("–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", e);
        } catch (Exception e) {
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏: " + e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç IP —Å–µ—Ä–≤–µ—Ä–∞ (–≤–Ω–µ—à–Ω–∏–π –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π) —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private String cachedServerIP = null;
    private long lastIPCheck = 0;
    private static final long IP_CACHE_TIME = 600000; // 10 –º–∏–Ω—É—Ç –∫–µ—à –¥–ª—è IP

    public String getServerIP() {
        long currentTime = System.currentTimeMillis();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP –µ—Å–ª–∏ –æ–Ω —Å–≤–µ–∂–∏–π
        if (cachedServerIP != null && (currentTime - lastIPCheck) < IP_CACHE_TIME) {
            return cachedServerIP;
        }

        try {
            String externalIP = getExternalIP();
            if (externalIP != null) {
                cachedServerIP = externalIP;
                lastIPCheck = currentTime;
                return externalIP;
            }

            String localIP = InetAddress.getLocalHost().getHostAddress();
            cachedServerIP = localIP;
            lastIPCheck = currentTime;
            return localIP;
        } catch (Exception e) {
            getLogger().warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: " + e.getMessage());
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π IP –µ—Å–ª–∏ –µ—Å—Ç—å
            return cachedServerIP;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π IP —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å—ã
     */
    private String getExternalIP() {
        String[] ipServices = {
                "http://checkip.amazonaws.com/",
                "https://api.ipify.org",
                "http://icanhazip.com/"
        };

        for (String serviceUrl : ipServices) {
            try {
                URL url = new URL(serviceUrl);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setRequestMethod("GET");
                connection.setConnectTimeout(5000);
                connection.setReadTimeout(5000);
                connection.setRequestProperty("User-Agent", "RefontSearch/" + getDescription().getVersion());

                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String ip = reader.readLine();
                reader.close();

                if (ip != null && !ip.trim().isEmpty()) {
                    return ip.trim();
                }
            } catch (Exception e) {
                // –¢–∏—Ö–æ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
            }
        }
        return null;
    }

    /**
     * –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–ª–∞–≥–∏–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏
     */
    private void continueLoading() {
        isValidated = true;

        DemorganManager.init(this);
        DemorganManager.loadDemorganData();

        // –°–æ–∑–¥–∞–µ–º/–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        saveDefaultConfig();

        // –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        if (isLocalServer) {
            getLogger().info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            getLogger().info("‚ïë          –†–ï–ñ–ò–ú –†–ê–ó–†–ê–ë–û–¢–ö–ò            ‚ïë");
            getLogger().info("‚ïë  üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä                ‚ïë");
            getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        } else if (ipProtection.isFallbackModeActive() || licenseFallbackActive) {
            getLogger().warning("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            getLogger().warning("‚ïë          üÜò FALLBACK –†–ï–ñ–ò–ú           ‚ïë");
            getLogger().warning("‚ïë  –ü–ª–∞–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚ïë");
            if (ipProtection.isFallbackModeActive()) {
                getLogger().warning("‚ïë  ‚Ä¢ IP –∑–∞—â–∏—Ç–∞: FALLBACK               ‚ïë");
            }
            if (licenseFallbackActive) {
                getLogger().warning("‚ïë  ‚Ä¢ –õ–∏—Ü–µ–Ω–∑–∏—è: FALLBACK                ‚ïë");
            }
            getLogger().warning("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        } else {
            getLogger().info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            getLogger().info("‚ïë            RefontSearch              ‚ïë");
            getLogger().info("‚ïë  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞           ‚ïë");
            getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥
        updateConfig();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        WantedManager.init(this);
        JailManager.init(this);
        jailsManager = new JailsManager(this);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        loadJailLocations();

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º PlaceholderAPI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (Bukkit.getPluginManager().getPlugin("PlaceholderAPI") != null) {
            new RefontSearchExpansion(this).register();
            getLogger().info("üîó PlaceholderAPI –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω");
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        registerCommands();

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        registerListeners();

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
        if (!isLocalServer) {
            updater = new Updater(this);
            updater.startUpdateChecker();

            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            Bukkit.getScheduler().runTaskTimerAsynchronously(this, () -> {
                if (!validateLicenseWithRetries()) {
                    getLogger().warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ª–∏—Ü–µ–Ω–∑–∏–µ–π –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ");
                }
                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º IP protection
                ipProtection.validateServer();
            }, 36000L, 36000L);
        }

        // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        getLogger().info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        getLogger().info("‚ïë  üéâ RefontSearch –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!   ‚ïë");
        getLogger().info("‚ïë  üëÆ –ü–æ–ª–∏—Ü–µ–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞       ‚ïë");
        getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—é—Ä–µ–º
     */
    private void loadJailLocations() {
        String startStr = getConfig().getString("jail.location.start", "");
        if (!startStr.isEmpty()) {
            jailLocation = parseLocation(startStr);
        }
        String endStr = getConfig().getString("jail.location.end", "");
        if (!endStr.isEmpty()) {
            unjailLocation = parseLocation(endStr);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞–≥–∏–Ω–∞
     */
    private void registerCommands() {
        getCommand("unwanted").setExecutor(new UnwantedCommand());
        getCommand("unwanted").setTabCompleter(new UnwantedCommand());
        getCommand("policefind").setExecutor(new PoliceFindCommand());
        getCommand("policefind").setTabCompleter(new PoliceFindCommand());
        getCommand("policecall").setExecutor(new PoliceCallCommand());
        getCommand("policeaccept").setExecutor(new PoliceAcceptCommand());
        getCommand("wanted").setExecutor(new WantedCommand());
        getCommand("arrest").setExecutor(new ArrestCommand());
        getCommand("arrest").setTabCompleter(new ArrestCommand());

        if (getConfig().getBoolean("baton.enabled", true)) {
            getCommand("wanteditems").setExecutor(new WantedItemsCommand());
            Bukkit.getPluginManager().registerEvents(new BatonMechanicListener(this), this);
        }

        if (getConfig().getBoolean("demorgan.enabled", true)) {
            getCommand("demorgan").setExecutor(new DemorganCommand(this));
            getCommand("demorgan").setTabCompleter(new DemorganCommand(this));
            getCommand("undemorgan").setExecutor(new UndemorganCommand(this));
            getCommand("undemorgan").setTabCompleter(new UndemorganCommand(this));
            getCommand("demorganlist").setExecutor(new DemorganListCommand(this));
            getCommand("setdemorgan").setExecutor(new SetDemorganCommand(this));
        }

        getCommand("setjail").setExecutor(new SetJailCommand());
        getCommand("unjail").setExecutor(new UnjailCommand());
        getCommand("unjail").setTabCompleter(new UnjailCommand());
        getCommand("updatestars").setExecutor(new UpdateStarsCommand());
        getCommand("updatestars").setTabCompleter(new UpdateStarsCommand());
        getCommand("jails").setExecutor(new JailsCommand(this));
        getCommand("jails").setTabCompleter(new JailsCommand(this));
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
     */
    private void registerListeners() {

        if (getConfig().getBoolean("demorgan.enabled", true)) {
            Bukkit.getPluginManager().registerEvents(new DemorganMovementListener(this), this);
        }

        Bukkit.getPluginManager().registerEvents(new PlayerDeathListener(), this);
        Bukkit.getPluginManager().registerEvents(new PlayerRespawnListener(this), this);
        Bukkit.getPluginManager().registerEvents(new WantedInventoryListener(), this);
        Bukkit.getPluginManager().registerEvents(new PlayerMovementListener(this), this);
        Bukkit.getPluginManager().registerEvents(new PlayerJoinListener(this), this);
    }

    /**
     * –û—Ç–∫–ª—é—á–∞–µ—Ç –ø–ª–∞–≥–∏–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï fallback —Ä–µ–∂–∏–º)
     */
    private void disablePlugin() {
        getLogger().severe("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        getLogger().severe("‚ïë          –û–®–ò–ë–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò            ‚ïë");
        getLogger().severe("‚ïë                                      ‚ïë");
        getLogger().severe("‚ïë  ‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è        ‚ïë");
        getLogger().severe("‚ïë  üåê IP —Å–µ—Ä–≤–µ—Ä–∞: " + formatIP(serverIP) + "‚ïë");
        getLogger().severe("‚ïë                                      ‚ïë");
        getLogger().severe("‚ïë  üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:                      ‚ïë");
        getLogger().severe("‚ïë  Discord: rizonchik                 ‚ïë");
        getLogger().severe("‚ïë  Telegram: @orythix                 ‚ïë");
        getLogger().severe("‚ïë  Bot: @rizonchik_bot                ‚ïë");
        getLogger().severe("‚ïë                                      ‚ïë");
        getLogger().severe("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");

        Bukkit.getScheduler().runTaskLater(this, () -> {
            Bukkit.getPluginManager().disablePlugin(this);
        }, 100L);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç IP –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatIP(String ip) {
        if (ip == null) return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ        ";

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        int spaces = 15 - ip.length();
        StringBuilder result = new StringBuilder(ip);
        for (int i = 0; i < spaces; i++) {
            result.append(" ");
        }
        return result.toString();
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞
     */
    private void updateConfig() {
        try {
            File configFile = new File(getDataFolder(), "config.yml");
            FileConfiguration currentConfig = YamlConfiguration.loadConfiguration(configFile);

            Reader defaultConfigStream = new InputStreamReader(getResource("config.yml"), StandardCharsets.UTF_8);
            YamlConfiguration defaultConfig = YamlConfiguration.loadConfiguration(defaultConfigStream);

            boolean changed = false;

            for (String key : defaultConfig.getKeys(true)) {
                if (!currentConfig.contains(key)) {
                    currentConfig.set(key, defaultConfig.get(key));
                    changed = true;
                }
            }

            if (changed) {
                currentConfig.save(configFile);
                reloadConfig();
                getLogger().info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞");
            }
        } catch (Exception e) {
            getLogger().warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        }
    }

    @Override
    public void onDisable() {
        DemorganManager.onDisable();
        if (isValidated) {
            JailManager.onDisable();
            getLogger().info("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            getLogger().info("‚ïë            RefontSearch              ‚ïë");
            getLogger().info("‚ïë  üî¥ –ü–ª–∞–≥–∏–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω        ‚ïë");
            getLogger().info("‚ïë  üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!                    ‚ïë");
            getLogger().info("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        }
    }

    // ====== –ì–ï–¢–¢–ï–†–´ –ò –°–ï–¢–¢–ï–†–´ ======

    public static RefontSearch getInstance() {
        return instance;
    }

    public boolean isValidated() {
        return isValidated;
    }

    public String getLicenseKey() {
        return licenseKey;
    }

    public boolean isLocalServer() {
        return isLocalServer;
    }

    public boolean isLicenseFallbackActive() {
        return licenseFallbackActive;
    }

    public Updater getUpdater() {
        return updater;
    }

    public IPProtection getIpProtection() {
        return ipProtection;
    }

    public Location getJailLocation() {
        return jailLocation;
    }

    public void setJailLocation(Location loc) {
        this.jailLocation = loc;
    }

    public Location getUnjailLocation() {
        return unjailLocation;
    }

    public void setUnjailLocation(Location loc) {
        this.unjailLocation = loc;
    }

    public JailsManager getJailsManager() {
        return jailsManager;
    }

    /**
     * –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–∫–∞—Ü–∏–∏ –≤ –æ–±—ä–µ–∫—Ç Location
     */
    private Location parseLocation(String locStr) {
        String[] parts = locStr.split(";");
        if (parts.length != 4) return null;
        World world = Bukkit.getWorld(parts[0]);
        if (world == null) return null;
        try {
            double x = Double.parseDouble(parts[1]);
            double y = Double.parseDouble(parts[2]);
            double z = Double.parseDouble(parts[3]);
            return new Location(world, x, y, z);
        } catch (NumberFormatException e) {
            return null;
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—é—Ä–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥
     */
    public void saveJailLocations() {
        if (jailLocation != null) {
            String locStr = jailLocation.getWorld().getName() + ";" + jailLocation.getX() + ";" + jailLocation.getY() + ";" + jailLocation.getZ();
            getConfig().set("jail.location.start", locStr);
        }
        if (unjailLocation != null) {
            String locStr = unjailLocation.getWorld().getName() + ";" + unjailLocation.getX() + ";" + unjailLocation.getY() + ";" + unjailLocation.getZ();
            getConfig().set("jail.location.end", locStr);
        }
        saveConfig();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
     */
    public void clearLicenseCache() {
        lastLicenseCheck = 0;
        lastLicenseResult = false;
        cachedServerIP = null;
        lastIPCheck = 0;
        licenseFallbackActive = false;
        licenseFallureCount = 0;
        getLogger().info("üîÑ –ö–µ—à –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ IP –æ—á–∏—â–µ–Ω, fallback —Ä–µ–∂–∏–º—ã —Å–±—Ä–æ—à–µ–Ω—ã");
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
     */
    public void forceReconnectionCheck() {
        getLogger().info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...");

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–µ—à–∏
        clearLicenseCache();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º IP protection
        ipProtection.forceReconnectionCheck();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Ü–µ–Ω–∑–∏—é
        Bukkit.getScheduler().runTaskAsynchronously(this, () -> {
            boolean licenseValid = validateLicenseWithRetries();
            if (licenseValid) {
                getLogger().info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ —É—Å–ø–µ—à–Ω–∞");
            } else {
                getLogger().warning("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–µ—É–¥–∞—á–Ω–∞");
            }
        });
    }
}